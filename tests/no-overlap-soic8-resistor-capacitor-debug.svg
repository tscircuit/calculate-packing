<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <rect data-type="rect" data-label="pcb_component_0
ccwRotationOffsetDegrees: 0.0°" data-x="0" data-y="0" x="199.48102497567308" y="317.7294842685696" width="400.5189750243269" height="217.96951021732076" fill="rgba(0,0,0,0.25)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_0_pad_0 net_0" data-x="-1.905" data-y="-0.975" x="199.48102497567308" y="494.82971132014274" width="54.492377554330204" height="40.86928316574762" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_0_pad_1 net_1" data-x="-0.635" data-y="-0.975" x="314.8232241323387" y="494.82971132014274" width="54.492377554330176" height="40.86928316574762" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_0_pad_2 net_2" data-x="0.635" data-y="-0.975" x="430.16542328900425" y="494.82971132014274" width="54.492377554330176" height="40.86928316574762" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_0_pad_3 net_3" data-x="1.905" data-y="-0.975" x="545.5076224456698" y="494.82971132014274" width="54.49237755433023" height="40.86928316574762" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_0_pad_4 net_4" data-x="1.905" data-y="0.975" x="545.5076224456698" y="317.7294842685696" width="54.49237755433023" height="40.869283165747675" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_0_pad_5 net_5" data-x="0.635" data-y="0.975" x="430.16542328900425" y="317.7294842685696" width="54.492377554330176" height="40.869283165747675" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_0_pad_6 net_6" data-x="-0.635" data-y="0.975" x="314.8232241323387" y="317.7294842685696" width="54.492377554330176" height="40.869283165747675" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_0_pad_7 net_7" data-x="-1.905" data-y="0.975" x="199.48102497567308" y="317.7294842685696" width="54.492377554330204" height="40.869283165747675" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_1
ccwRotationOffsetDegrees: 0.0°" data-x="0.03900000000000001" data-y="3" x="330.6260136230944" y="131.54719429127476" width="145.3130068115472" height="45.41031462860852" fill="rgba(0,0,0,0.25)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_1_pad_0 net_8" data-x="-0.46099999999999997" data-y="3" x="330.6260136230944" y="131.54719429127476" width="54.492377554330176" height="45.41031462860852" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_1_pad_1 net_9" data-x="0.539" data-y="3" x="421.4466428803114" y="131.54719429127476" width="54.49237755433023" height="45.41031462860852" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_2
ccwRotationOffsetDegrees: 0.0°" data-x="-2.711" data-y="3.15" x="40.00000000000006" y="104.3010055141097" width="227.0515731430425" height="72.65650340577358" fill="rgba(0,0,0,0.25)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_2_pad_0 net_10" data-x="-3.511" data-y="3.15" x="40" y="104.3010055141097" width="81.73856633149535" height="72.65650340577358" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g>
    <rect data-type="rect" data-label="pcb_component_2_pad_1 net_11" data-x="-1.9109999999999998" data-y="3.15" x="185.31300681154727" y="104.3010055141097" width="81.73856633149529" height="72.65650340577358" fill="rgba(255,0,0,0.8)" stroke="black" stroke-width="0.011010714285714287" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 90.82062925721699,
        "c": 0,
        "e": 399.74051248783655,
        "b": 0,
        "d": -90.82062925721699,
        "f": 426.71423937723
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>